package com.didate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProgramIndicatorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramIndicatorAllPropertiesEquals(ProgramIndicator expected, ProgramIndicator actual) {
        assertProgramIndicatorAutoGeneratedPropertiesEquals(expected, actual);
        assertProgramIndicatorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramIndicatorAllUpdatablePropertiesEquals(ProgramIndicator expected, ProgramIndicator actual) {
        assertProgramIndicatorUpdatableFieldsEquals(expected, actual);
        assertProgramIndicatorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramIndicatorAutoGeneratedPropertiesEquals(ProgramIndicator expected, ProgramIndicator actual) {
        assertThat(expected)
            .as("Verify ProgramIndicator auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramIndicatorUpdatableFieldsEquals(ProgramIndicator expected, ProgramIndicator actual) {
        assertThat(expected)
            .as("Verify ProgramIndicator relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()))
            .satisfies(e -> assertThat(e.getShortName()).as("check shortName").isEqualTo(actual.getShortName()))
            .satisfies(e -> assertThat(e.getDimensionItemType()).as("check dimensionItemType").isEqualTo(actual.getDimensionItemType()))
            .satisfies(e -> assertThat(e.getExpression()).as("check expression").isEqualTo(actual.getExpression()))
            .satisfies(e -> assertThat(e.getFilter()).as("check filter").isEqualTo(actual.getFilter()))
            .satisfies(e -> assertThat(e.getAnalyticsType()).as("check analyticsType").isEqualTo(actual.getAnalyticsType()))
            .satisfies(e -> assertThat(e.getDimensionItem()).as("check dimensionItem").isEqualTo(actual.getDimensionItem()))
            .satisfies(e -> assertThat(e.getDisplayShortName()).as("check displayShortName").isEqualTo(actual.getDisplayShortName()))
            .satisfies(e -> assertThat(e.getDisplayName()).as("check displayName").isEqualTo(actual.getDisplayName()))
            .satisfies(e -> assertThat(e.getDisplayFormName()).as("check displayFormName").isEqualTo(actual.getDisplayFormName()))
            .satisfies(e -> assertThat(e.getTrack()).as("check track").isEqualTo(actual.getTrack()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramIndicatorUpdatableRelationshipsEquals(ProgramIndicator expected, ProgramIndicator actual) {
        assertThat(expected)
            .as("Verify ProgramIndicator relationships")
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getProgram()).as("check program").isEqualTo(actual.getProgram()))
            .satisfies(e -> assertThat(e.getPrograms()).as("check programs").isEqualTo(actual.getPrograms()));
    }
}

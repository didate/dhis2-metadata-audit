package com.didate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DatasetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatasetAllPropertiesEquals(Dataset expected, Dataset actual) {
        assertDatasetAutoGeneratedPropertiesEquals(expected, actual);
        assertDatasetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatasetAllUpdatablePropertiesEquals(Dataset expected, Dataset actual) {
        assertDatasetUpdatableFieldsEquals(expected, actual);
        assertDatasetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatasetAutoGeneratedPropertiesEquals(Dataset expected, Dataset actual) {
        assertThat(expected)
            .as("Verify Dataset auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatasetUpdatableFieldsEquals(Dataset expected, Dataset actual) {
        assertThat(expected)
            .as("Verify Dataset relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()))
            .satisfies(e -> assertThat(e.getShortName()).as("check shortName").isEqualTo(actual.getShortName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getDimensionItemType()).as("check dimensionItemType").isEqualTo(actual.getDimensionItemType()))
            .satisfies(e -> assertThat(e.getPeriodType()).as("check periodType").isEqualTo(actual.getPeriodType()))
            .satisfies(e -> assertThat(e.getMobile()).as("check mobile").isEqualTo(actual.getMobile()))
            .satisfies(e -> assertThat(e.getVersion()).as("check version").isEqualTo(actual.getVersion()))
            .satisfies(e -> assertThat(e.getExpiryDays()).as("check expiryDays").isEqualTo(actual.getExpiryDays()))
            .satisfies(e -> assertThat(e.getTimelyDays()).as("check timelyDays").isEqualTo(actual.getTimelyDays()))
            .satisfies(
                e -> assertThat(e.getNotifyCompletingUser()).as("check notifyCompletingUser").isEqualTo(actual.getNotifyCompletingUser())
            )
            .satisfies(e -> assertThat(e.getOpenFuturePeriods()).as("check openFuturePeriods").isEqualTo(actual.getOpenFuturePeriods()))
            .satisfies(
                e ->
                    assertThat(e.getOpenPeriodsAfterCoEndDate())
                        .as("check openPeriodsAfterCoEndDate")
                        .isEqualTo(actual.getOpenPeriodsAfterCoEndDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getFieldCombinationRequired())
                        .as("check fieldCombinationRequired")
                        .isEqualTo(actual.getFieldCombinationRequired())
            )
            .satisfies(e -> assertThat(e.getValidCompleteOnly()).as("check validCompleteOnly").isEqualTo(actual.getValidCompleteOnly()))
            .satisfies(
                e ->
                    assertThat(e.getNoValueRequiresComment())
                        .as("check noValueRequiresComment")
                        .isEqualTo(actual.getNoValueRequiresComment())
            )
            .satisfies(e -> assertThat(e.getSkipOffline()).as("check skipOffline").isEqualTo(actual.getSkipOffline()))
            .satisfies(
                e -> assertThat(e.getDataElementDecoration()).as("check dataElementDecoration").isEqualTo(actual.getDataElementDecoration())
            )
            .satisfies(e -> assertThat(e.getRenderAsTabs()).as("check renderAsTabs").isEqualTo(actual.getRenderAsTabs()))
            .satisfies(e -> assertThat(e.getRenderHorizontally()).as("check renderHorizontally").isEqualTo(actual.getRenderHorizontally()))
            .satisfies(
                e ->
                    assertThat(e.getCompulsoryFieldsCompleteOnly())
                        .as("check compulsoryFieldsCompleteOnly")
                        .isEqualTo(actual.getCompulsoryFieldsCompleteOnly())
            )
            .satisfies(e -> assertThat(e.getFormType()).as("check formType").isEqualTo(actual.getFormType()))
            .satisfies(e -> assertThat(e.getDisplayName()).as("check displayName").isEqualTo(actual.getDisplayName()))
            .satisfies(e -> assertThat(e.getDimensionItem()).as("check dimensionItem").isEqualTo(actual.getDimensionItem()))
            .satisfies(e -> assertThat(e.getDisplayShortName()).as("check displayShortName").isEqualTo(actual.getDisplayShortName()))
            .satisfies(e -> assertThat(e.getDisplayDescription()).as("check displayDescription").isEqualTo(actual.getDisplayDescription()))
            .satisfies(e -> assertThat(e.getDisplayFormName()).as("check displayFormName").isEqualTo(actual.getDisplayFormName()))
            .satisfies(e -> assertThat(e.getTrack()).as("check track").isEqualTo(actual.getTrack()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatasetUpdatableRelationshipsEquals(Dataset expected, Dataset actual) {
        assertThat(expected)
            .as("Verify Dataset relationships")
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getCategoryCombo()).as("check categoryCombo").isEqualTo(actual.getCategoryCombo()))
            .satisfies(e -> assertThat(e.getDataElements()).as("check dataElements").isEqualTo(actual.getDataElements()))
            .satisfies(e -> assertThat(e.getOrganisationUnits()).as("check organisationUnits").isEqualTo(actual.getOrganisationUnits()));
    }
}

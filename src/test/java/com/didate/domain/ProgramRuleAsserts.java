package com.didate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProgramRuleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleAllPropertiesEquals(ProgramRule expected, ProgramRule actual) {
        assertProgramRuleAutoGeneratedPropertiesEquals(expected, actual);
        assertProgramRuleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleAllUpdatablePropertiesEquals(ProgramRule expected, ProgramRule actual) {
        assertProgramRuleUpdatableFieldsEquals(expected, actual);
        assertProgramRuleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleAutoGeneratedPropertiesEquals(ProgramRule expected, ProgramRule actual) {
        assertThat(expected)
            .as("Verify ProgramRule auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleUpdatableFieldsEquals(ProgramRule expected, ProgramRule actual) {
        assertThat(expected)
            .as("Verify ProgramRule relevant properties")
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()))
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDisplayName()).as("check displayName").isEqualTo(actual.getDisplayName()))
            .satisfies(e -> assertThat(e.getPriority()).as("check priority").isEqualTo(actual.getPriority()))
            .satisfies(e -> assertThat(e.getCondition()).as("check condition").isEqualTo(actual.getCondition()))
            .satisfies(e -> assertThat(e.getTrack()).as("check track").isEqualTo(actual.getTrack()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleUpdatableRelationshipsEquals(ProgramRule expected, ProgramRule actual) {
        assertThat(expected)
            .as("Verify ProgramRule relationships")
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getProgram()).as("check program").isEqualTo(actual.getProgram()));
    }
}

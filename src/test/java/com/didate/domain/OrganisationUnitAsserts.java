package com.didate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OrganisationUnitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisationUnitAllPropertiesEquals(OrganisationUnit expected, OrganisationUnit actual) {
        assertOrganisationUnitAutoGeneratedPropertiesEquals(expected, actual);
        assertOrganisationUnitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisationUnitAllUpdatablePropertiesEquals(OrganisationUnit expected, OrganisationUnit actual) {
        assertOrganisationUnitUpdatableFieldsEquals(expected, actual);
        assertOrganisationUnitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisationUnitAutoGeneratedPropertiesEquals(OrganisationUnit expected, OrganisationUnit actual) {
        assertThat(expected)
            .as("Verify OrganisationUnit auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisationUnitUpdatableFieldsEquals(OrganisationUnit expected, OrganisationUnit actual) {
        assertThat(expected)
            .as("Verify OrganisationUnit relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()))
            .satisfies(e -> assertThat(e.getPath()).as("check path").isEqualTo(actual.getPath()))
            .satisfies(e -> assertThat(e.getOpeningDate()).as("check openingDate").isEqualTo(actual.getOpeningDate()))
            .satisfies(e -> assertThat(e.getLevel()).as("check level").isEqualTo(actual.getLevel()))
            .satisfies(e -> assertThat(e.getTrack()).as("check track").isEqualTo(actual.getTrack()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisationUnitUpdatableRelationshipsEquals(OrganisationUnit expected, OrganisationUnit actual) {
        assertThat(expected)
            .as("Verify OrganisationUnit relationships")
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getPrograms()).as("check programs").isEqualTo(actual.getPrograms()))
            .satisfies(e -> assertThat(e.getDatasets()).as("check datasets").isEqualTo(actual.getDatasets()));
    }
}

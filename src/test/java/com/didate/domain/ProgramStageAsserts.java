package com.didate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProgramStageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramStageAllPropertiesEquals(ProgramStage expected, ProgramStage actual) {
        assertProgramStageAutoGeneratedPropertiesEquals(expected, actual);
        assertProgramStageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramStageAllUpdatablePropertiesEquals(ProgramStage expected, ProgramStage actual) {
        assertProgramStageUpdatableFieldsEquals(expected, actual);
        assertProgramStageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramStageAutoGeneratedPropertiesEquals(ProgramStage expected, ProgramStage actual) {
        assertThat(expected)
            .as("Verify ProgramStage auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramStageUpdatableFieldsEquals(ProgramStage expected, ProgramStage actual) {
        assertThat(expected)
            .as("Verify ProgramStage relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()))
            .satisfies(e -> assertThat(e.getMinDaysFromStart()).as("check minDaysFromStart").isEqualTo(actual.getMinDaysFromStart()))
            .satisfies(e -> assertThat(e.getExecutionDateLabel()).as("check executionDateLabel").isEqualTo(actual.getExecutionDateLabel()))
            .satisfies(e -> assertThat(e.getAutoGenerateEvent()).as("check autoGenerateEvent").isEqualTo(actual.getAutoGenerateEvent()))
            .satisfies(e -> assertThat(e.getValidationStrategy()).as("check validationStrategy").isEqualTo(actual.getValidationStrategy()))
            .satisfies(
                e ->
                    assertThat(e.getDisplayGenerateEventBox())
                        .as("check displayGenerateEventBox")
                        .isEqualTo(actual.getDisplayGenerateEventBox())
            )
            .satisfies(e -> assertThat(e.getFeatureType()).as("check featureType").isEqualTo(actual.getFeatureType()))
            .satisfies(e -> assertThat(e.getBlockEntryForm()).as("check blockEntryForm").isEqualTo(actual.getBlockEntryForm()))
            .satisfies(e -> assertThat(e.getPreGenerateUID()).as("check preGenerateUID").isEqualTo(actual.getPreGenerateUID()))
            .satisfies(e -> assertThat(e.getRemindCompleted()).as("check remindCompleted").isEqualTo(actual.getRemindCompleted()))
            .satisfies(
                e ->
                    assertThat(e.getGeneratedByEnrollmentDate())
                        .as("check generatedByEnrollmentDate")
                        .isEqualTo(actual.getGeneratedByEnrollmentDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getAllowGenerateNextVisit())
                        .as("check allowGenerateNextVisit")
                        .isEqualTo(actual.getAllowGenerateNextVisit())
            )
            .satisfies(
                e -> assertThat(e.getOpenAfterEnrollment()).as("check openAfterEnrollment").isEqualTo(actual.getOpenAfterEnrollment())
            )
            .satisfies(e -> assertThat(e.getSortOrder()).as("check sortOrder").isEqualTo(actual.getSortOrder()))
            .satisfies(e -> assertThat(e.getHideDueDate()).as("check hideDueDate").isEqualTo(actual.getHideDueDate()))
            .satisfies(
                e -> assertThat(e.getEnableUserAssignment()).as("check enableUserAssignment").isEqualTo(actual.getEnableUserAssignment())
            )
            .satisfies(e -> assertThat(e.getReferral()).as("check referral").isEqualTo(actual.getReferral()))
            .satisfies(
                e ->
                    assertThat(e.getDisplayExecutionDateLabel())
                        .as("check displayExecutionDateLabel")
                        .isEqualTo(actual.getDisplayExecutionDateLabel())
            )
            .satisfies(e -> assertThat(e.getFormType()).as("check formType").isEqualTo(actual.getFormType()))
            .satisfies(e -> assertThat(e.getDisplayFormName()).as("check displayFormName").isEqualTo(actual.getDisplayFormName()))
            .satisfies(e -> assertThat(e.getDisplayName()).as("check displayName").isEqualTo(actual.getDisplayName()))
            .satisfies(e -> assertThat(e.getRepeatable()).as("check repeatable").isEqualTo(actual.getRepeatable()))
            .satisfies(
                e ->
                    assertThat(e.getProgramStageDataElementsCount())
                        .as("check programStageDataElementsCount")
                        .isEqualTo(actual.getProgramStageDataElementsCount())
            )
            .satisfies(
                e ->
                    assertThat(e.getProgramStageDataElementsContent())
                        .as("check programStageDataElementsContent")
                        .isEqualTo(actual.getProgramStageDataElementsContent())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramStageUpdatableRelationshipsEquals(ProgramStage expected, ProgramStage actual) {
        assertThat(expected)
            .as("Verify ProgramStage relationships")
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getProgram()).as("check program").isEqualTo(actual.getProgram()))
            .satisfies(
                e ->
                    assertThat(e.getProgramStageDataElements())
                        .as("check programStageDataElements")
                        .isEqualTo(actual.getProgramStageDataElements())
            )
            .satisfies(e -> assertThat(e.getPrograms()).as("check programs").isEqualTo(actual.getPrograms()));
    }
}

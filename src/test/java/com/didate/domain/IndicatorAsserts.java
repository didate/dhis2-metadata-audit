package com.didate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class IndicatorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndicatorAllPropertiesEquals(Indicator expected, Indicator actual) {
        assertIndicatorAutoGeneratedPropertiesEquals(expected, actual);
        assertIndicatorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndicatorAllUpdatablePropertiesEquals(Indicator expected, Indicator actual) {
        assertIndicatorUpdatableFieldsEquals(expected, actual);
        assertIndicatorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndicatorAutoGeneratedPropertiesEquals(Indicator expected, Indicator actual) {
        assertThat(expected)
            .as("Verify Indicator auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndicatorUpdatableFieldsEquals(Indicator expected, Indicator actual) {
        assertThat(expected)
            .as("Verify Indicator relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getShortName()).as("check shortName").isEqualTo(actual.getShortName()))
            .satisfies(e -> assertThat(e.getDisplayShortName()).as("check displayShortName").isEqualTo(actual.getDisplayShortName()))
            .satisfies(e -> assertThat(e.getDisplayName()).as("check displayName").isEqualTo(actual.getDisplayName()))
            .satisfies(e -> assertThat(e.getDisplayFormName()).as("check displayFormName").isEqualTo(actual.getDisplayFormName()))
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()))
            .satisfies(e -> assertThat(e.getPublicAccess()).as("check publicAccess").isEqualTo(actual.getPublicAccess()))
            .satisfies(e -> assertThat(e.getDimensionItemType()).as("check dimensionItemType").isEqualTo(actual.getDimensionItemType()))
            .satisfies(e -> assertThat(e.getAnnualized()).as("check annualized").isEqualTo(actual.getAnnualized()))
            .satisfies(e -> assertThat(e.getNumerator()).as("check numerator").isEqualTo(actual.getNumerator()))
            .satisfies(
                e -> assertThat(e.getNumeratorDescription()).as("check numeratorDescription").isEqualTo(actual.getNumeratorDescription())
            )
            .satisfies(e -> assertThat(e.getDenominator()).as("check denominator").isEqualTo(actual.getDenominator()))
            .satisfies(
                e ->
                    assertThat(e.getDenominatorDescription())
                        .as("check denominatorDescription")
                        .isEqualTo(actual.getDenominatorDescription())
            )
            .satisfies(
                e ->
                    assertThat(e.getDisplayNumeratorDescription())
                        .as("check displayNumeratorDescription")
                        .isEqualTo(actual.getDisplayNumeratorDescription())
            )
            .satisfies(
                e ->
                    assertThat(e.getDisplayDenominatorDescription())
                        .as("check displayDenominatorDescription")
                        .isEqualTo(actual.getDisplayDenominatorDescription())
            )
            .satisfies(e -> assertThat(e.getDimensionItem()).as("check dimensionItem").isEqualTo(actual.getDimensionItem()))
            .satisfies(e -> assertThat(e.getTrack()).as("check track").isEqualTo(actual.getTrack()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndicatorUpdatableRelationshipsEquals(Indicator expected, Indicator actual) {
        assertThat(expected)
            .as("Verify Indicator relationships")
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getIndicatorType()).as("check indicatorType").isEqualTo(actual.getIndicatorType()));
    }
}

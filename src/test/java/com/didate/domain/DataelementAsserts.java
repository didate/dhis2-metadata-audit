package com.didate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DataelementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDataelementAllPropertiesEquals(Dataelement expected, Dataelement actual) {
        assertDataelementAutoGeneratedPropertiesEquals(expected, actual);
        assertDataelementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDataelementAllUpdatablePropertiesEquals(Dataelement expected, Dataelement actual) {
        assertDataelementUpdatableFieldsEquals(expected, actual);
        assertDataelementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDataelementAutoGeneratedPropertiesEquals(Dataelement expected, Dataelement actual) {
        assertThat(expected)
            .as("Verify Dataelement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDataelementUpdatableFieldsEquals(Dataelement expected, Dataelement actual) {
        assertThat(expected)
            .as("Verify Dataelement relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getShortName()).as("check shortName").isEqualTo(actual.getShortName()))
            .satisfies(e -> assertThat(e.getFormName()).as("check formName").isEqualTo(actual.getFormName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getDisplayShortName()).as("check displayShortName").isEqualTo(actual.getDisplayShortName()))
            .satisfies(e -> assertThat(e.getDisplayName()).as("check displayName").isEqualTo(actual.getDisplayName()))
            .satisfies(e -> assertThat(e.getDisplayFormName()).as("check displayFormName").isEqualTo(actual.getDisplayFormName()))
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()))
            .satisfies(e -> assertThat(e.getPublicAccess()).as("check publicAccess").isEqualTo(actual.getPublicAccess()))
            .satisfies(e -> assertThat(e.getDimensionItemType()).as("check dimensionItemType").isEqualTo(actual.getDimensionItemType()))
            .satisfies(e -> assertThat(e.getAggregationType()).as("check aggregationType").isEqualTo(actual.getAggregationType()))
            .satisfies(e -> assertThat(e.getValueType()).as("check valueType").isEqualTo(actual.getValueType()))
            .satisfies(e -> assertThat(e.getDomainType()).as("check domainType").isEqualTo(actual.getDomainType()))
            .satisfies(e -> assertThat(e.getZeroIsSignificant()).as("check zeroIsSignificant").isEqualTo(actual.getZeroIsSignificant()))
            .satisfies(e -> assertThat(e.getOptionSetValue()).as("check optionSetValue").isEqualTo(actual.getOptionSetValue()))
            .satisfies(e -> assertThat(e.getDimensionItem()).as("check dimensionItem").isEqualTo(actual.getDimensionItem()))
            .satisfies(e -> assertThat(e.getTrack()).as("check track").isEqualTo(actual.getTrack()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDataelementUpdatableRelationshipsEquals(Dataelement expected, Dataelement actual) {
        assertThat(expected)
            .as("Verify Dataelement relationships")
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getCategoryCombo()).as("check categoryCombo").isEqualTo(actual.getCategoryCombo()))
            .satisfies(e -> assertThat(e.getOptionSet()).as("check optionSet").isEqualTo(actual.getOptionSet()))
            .satisfies(e -> assertThat(e.getPrograms()).as("check programs").isEqualTo(actual.getPrograms()))
            .satisfies(e -> assertThat(e.getDatasets()).as("check datasets").isEqualTo(actual.getDatasets()));
    }
}

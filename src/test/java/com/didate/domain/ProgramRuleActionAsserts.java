package com.didate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProgramRuleActionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleActionAllPropertiesEquals(ProgramRuleAction expected, ProgramRuleAction actual) {
        assertProgramRuleActionAutoGeneratedPropertiesEquals(expected, actual);
        assertProgramRuleActionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleActionAllUpdatablePropertiesEquals(ProgramRuleAction expected, ProgramRuleAction actual) {
        assertProgramRuleActionUpdatableFieldsEquals(expected, actual);
        assertProgramRuleActionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleActionAutoGeneratedPropertiesEquals(ProgramRuleAction expected, ProgramRuleAction actual) {
        assertThat(expected)
            .as("Verify ProgramRuleAction auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleActionUpdatableFieldsEquals(ProgramRuleAction expected, ProgramRuleAction actual) {
        assertThat(expected)
            .as("Verify ProgramRuleAction relevant properties")
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()))
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(
                e -> assertThat(e.getProgramRuleActionType()).as("check programRuleActionType").isEqualTo(actual.getProgramRuleActionType())
            )
            .satisfies(e -> assertThat(e.getEvaluationTime()).as("check evaluationTime").isEqualTo(actual.getEvaluationTime()))
            .satisfies(e -> assertThat(e.getData()).as("check data").isEqualTo(actual.getData()))
            .satisfies(e -> assertThat(e.getTemplateUid()).as("check templateUid").isEqualTo(actual.getTemplateUid()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getDisplayContent()).as("check displayContent").isEqualTo(actual.getDisplayContent()))
            .satisfies(e -> assertThat(e.getTrack()).as("check track").isEqualTo(actual.getTrack()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleActionUpdatableRelationshipsEquals(ProgramRuleAction expected, ProgramRuleAction actual) {
        assertThat(expected)
            .as("Verify ProgramRuleAction relationships")
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getProgramRule()).as("check programRule").isEqualTo(actual.getProgramRule()))
            .satisfies(
                e ->
                    assertThat(e.getTrackedEntityAttribute())
                        .as("check trackedEntityAttribute")
                        .isEqualTo(actual.getTrackedEntityAttribute())
            )
            .satisfies(e -> assertThat(e.getDataElement()).as("check dataElement").isEqualTo(actual.getDataElement()))
            .satisfies(e -> assertThat(e.getOptionGroup()).as("check optionGroup").isEqualTo(actual.getOptionGroup()));
    }
}

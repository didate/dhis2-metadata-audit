package com.didate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PersonNotifierAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonNotifierAllPropertiesEquals(PersonNotifier expected, PersonNotifier actual) {
        assertPersonNotifierAutoGeneratedPropertiesEquals(expected, actual);
        assertPersonNotifierAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonNotifierAllUpdatablePropertiesEquals(PersonNotifier expected, PersonNotifier actual) {
        assertPersonNotifierUpdatableFieldsEquals(expected, actual);
        assertPersonNotifierUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonNotifierAutoGeneratedPropertiesEquals(PersonNotifier expected, PersonNotifier actual) {
        assertThat(expected)
            .as("Verify PersonNotifier auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonNotifierUpdatableFieldsEquals(PersonNotifier expected, PersonNotifier actual) {
        assertThat(expected)
            .as("Verify PersonNotifier relevant properties")
            .satisfies(e -> assertThat(e.getPersonName()).as("check personName").isEqualTo(actual.getPersonName()))
            .satisfies(e -> assertThat(e.getPersonPhone()).as("check personPhone").isEqualTo(actual.getPersonPhone()))
            .satisfies(e -> assertThat(e.getPersonEmail()).as("check personEmail").isEqualTo(actual.getPersonEmail()))
            .satisfies(e -> assertThat(e.getPersonOrganization()).as("check personOrganization").isEqualTo(actual.getPersonOrganization()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonNotifierUpdatableRelationshipsEquals(PersonNotifier expected, PersonNotifier actual) {
        assertThat(expected)
            .as("Verify PersonNotifier relationships")
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()));
    }
}

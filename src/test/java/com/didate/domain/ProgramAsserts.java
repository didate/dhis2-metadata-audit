package com.didate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProgramAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramAllPropertiesEquals(Program expected, Program actual) {
        assertProgramAutoGeneratedPropertiesEquals(expected, actual);
        assertProgramAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramAllUpdatablePropertiesEquals(Program expected, Program actual) {
        assertProgramUpdatableFieldsEquals(expected, actual);
        assertProgramUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramAutoGeneratedPropertiesEquals(Program expected, Program actual) {
        assertThat(expected)
            .as("Verify Program auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramUpdatableFieldsEquals(Program expected, Program actual) {
        assertThat(expected)
            .as("Verify Program relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()))
            .satisfies(e -> assertThat(e.getShortName()).as("check shortName").isEqualTo(actual.getShortName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getVersion()).as("check version").isEqualTo(actual.getVersion()))
            .satisfies(
                e -> assertThat(e.getEnrollmentDateLabel()).as("check enrollmentDateLabel").isEqualTo(actual.getEnrollmentDateLabel())
            )
            .satisfies(e -> assertThat(e.getIncidentDateLabel()).as("check incidentDateLabel").isEqualTo(actual.getIncidentDateLabel()))
            .satisfies(e -> assertThat(e.getProgramType()).as("check programType").isEqualTo(actual.getProgramType()))
            .satisfies(
                e -> assertThat(e.getDisplayIncidentDate()).as("check displayIncidentDate").isEqualTo(actual.getDisplayIncidentDate())
            )
            .satisfies(
                e -> assertThat(e.getIgnoreOverdueEvents()).as("check ignoreOverdueEvents").isEqualTo(actual.getIgnoreOverdueEvents())
            )
            .satisfies(e -> assertThat(e.getUserRoles()).as("check userRoles").isEqualTo(actual.getUserRoles()))
            .satisfies(e -> assertThat(e.getProgramIndicators()).as("check programIndicators").isEqualTo(actual.getProgramIndicators()))
            .satisfies(
                e -> assertThat(e.getProgramRuleVariables()).as("check programRuleVariables").isEqualTo(actual.getProgramRuleVariables())
            )
            .satisfies(e -> assertThat(e.getOnlyEnrollOnce()).as("check onlyEnrollOnce").isEqualTo(actual.getOnlyEnrollOnce()))
            .satisfies(
                e -> assertThat(e.getNotificationTemplates()).as("check notificationTemplates").isEqualTo(actual.getNotificationTemplates())
            )
            .satisfies(
                e ->
                    assertThat(e.getSelectEnrollmentDatesInFuture())
                        .as("check selectEnrollmentDatesInFuture")
                        .isEqualTo(actual.getSelectEnrollmentDatesInFuture())
            )
            .satisfies(
                e ->
                    assertThat(e.getSelectIncidentDatesInFuture())
                        .as("check selectIncidentDatesInFuture")
                        .isEqualTo(actual.getSelectIncidentDatesInFuture())
            )
            .satisfies(e -> assertThat(e.getTrackedEntityType()).as("check trackedEntityType").isEqualTo(actual.getTrackedEntityType()))
            .satisfies(e -> assertThat(e.getStyle()).as("check style").isEqualTo(actual.getStyle()))
            .satisfies(e -> assertThat(e.getSkipOffline()).as("check skipOffline").isEqualTo(actual.getSkipOffline()))
            .satisfies(
                e -> assertThat(e.getDisplayFrontPageList()).as("check displayFrontPageList").isEqualTo(actual.getDisplayFrontPageList())
            )
            .satisfies(
                e ->
                    assertThat(e.getUseFirstStageDuringRegistration())
                        .as("check useFirstStageDuringRegistration")
                        .isEqualTo(actual.getUseFirstStageDuringRegistration())
            )
            .satisfies(e -> assertThat(e.getExpiryDays()).as("check expiryDays").isEqualTo(actual.getExpiryDays()))
            .satisfies(
                e ->
                    assertThat(e.getCompleteEventsExpiryDays())
                        .as("check completeEventsExpiryDays")
                        .isEqualTo(actual.getCompleteEventsExpiryDays())
            )
            .satisfies(
                e ->
                    assertThat(e.getOpenDaysAfterCoEndDate())
                        .as("check openDaysAfterCoEndDate")
                        .isEqualTo(actual.getOpenDaysAfterCoEndDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getMinAttributesRequiredToSearch())
                        .as("check minAttributesRequiredToSearch")
                        .isEqualTo(actual.getMinAttributesRequiredToSearch())
            )
            .satisfies(
                e -> assertThat(e.getMaxTeiCountToReturn()).as("check maxTeiCountToReturn").isEqualTo(actual.getMaxTeiCountToReturn())
            )
            .satisfies(e -> assertThat(e.getAccessLevel()).as("check accessLevel").isEqualTo(actual.getAccessLevel()))
            .satisfies(
                e ->
                    assertThat(e.getDisplayEnrollmentDateLabel())
                        .as("check displayEnrollmentDateLabel")
                        .isEqualTo(actual.getDisplayEnrollmentDateLabel())
            )
            .satisfies(
                e ->
                    assertThat(e.getDisplayIncidentDateLabel())
                        .as("check displayIncidentDateLabel")
                        .isEqualTo(actual.getDisplayIncidentDateLabel())
            )
            .satisfies(e -> assertThat(e.getRegistration()).as("check registration").isEqualTo(actual.getRegistration()))
            .satisfies(
                e -> assertThat(e.getWithoutRegistration()).as("check withoutRegistration").isEqualTo(actual.getWithoutRegistration())
            )
            .satisfies(e -> assertThat(e.getDisplayShortName()).as("check displayShortName").isEqualTo(actual.getDisplayShortName()))
            .satisfies(e -> assertThat(e.getDisplayDescription()).as("check displayDescription").isEqualTo(actual.getDisplayDescription()))
            .satisfies(e -> assertThat(e.getDisplayFormName()).as("check displayFormName").isEqualTo(actual.getDisplayFormName()))
            .satisfies(e -> assertThat(e.getDisplayName()).as("check displayName").isEqualTo(actual.getDisplayName()))
            .satisfies(
                e -> assertThat(e.getAttributeValuesCount()).as("check attributeValuesCount").isEqualTo(actual.getAttributeValuesCount())
            )
            .satisfies(
                e ->
                    assertThat(e.getOrganisationUnitsCount())
                        .as("check organisationUnitsCount")
                        .isEqualTo(actual.getOrganisationUnitsCount())
            )
            .satisfies(e -> assertThat(e.getProgramStagesCount()).as("check programStagesCount").isEqualTo(actual.getProgramStagesCount()))
            .satisfies(
                e -> assertThat(e.getProgramSectionsCount()).as("check programSectionsCount").isEqualTo(actual.getProgramSectionsCount())
            )
            .satisfies(
                e ->
                    assertThat(e.getProgramTrackedEntityAttributesCount())
                        .as("check programTrackedEntityAttributesCount")
                        .isEqualTo(actual.getProgramTrackedEntityAttributesCount())
            )
            .satisfies(e -> assertThat(e.getTrack()).as("check track").isEqualTo(actual.getTrack()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramUpdatableRelationshipsEquals(Program expected, Program actual) {
        assertThat(expected)
            .as("Verify Program relationships")
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getCategoryCombo()).as("check categoryCombo").isEqualTo(actual.getCategoryCombo()))
            .satisfies(e -> assertThat(e.getDataElements()).as("check dataElements").isEqualTo(actual.getDataElements()))
            .satisfies(e -> assertThat(e.getOrganisationUnits()).as("check organisationUnits").isEqualTo(actual.getOrganisationUnits()));
    }
}

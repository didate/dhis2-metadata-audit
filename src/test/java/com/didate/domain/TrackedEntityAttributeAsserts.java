package com.didate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TrackedEntityAttributeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrackedEntityAttributeAllPropertiesEquals(TrackedEntityAttribute expected, TrackedEntityAttribute actual) {
        assertTrackedEntityAttributeAutoGeneratedPropertiesEquals(expected, actual);
        assertTrackedEntityAttributeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrackedEntityAttributeAllUpdatablePropertiesEquals(
        TrackedEntityAttribute expected,
        TrackedEntityAttribute actual
    ) {
        assertTrackedEntityAttributeUpdatableFieldsEquals(expected, actual);
        assertTrackedEntityAttributeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrackedEntityAttributeAutoGeneratedPropertiesEquals(
        TrackedEntityAttribute expected,
        TrackedEntityAttribute actual
    ) {
        assertThat(expected)
            .as("Verify TrackedEntityAttribute auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrackedEntityAttributeUpdatableFieldsEquals(TrackedEntityAttribute expected, TrackedEntityAttribute actual) {
        assertThat(expected)
            .as("Verify TrackedEntityAttribute relevant properties")
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()))
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getShortName()).as("check shortName").isEqualTo(actual.getShortName()))
            .satisfies(e -> assertThat(e.getGenerated()).as("check generated").isEqualTo(actual.getGenerated()))
            .satisfies(e -> assertThat(e.getValueType()).as("check valueType").isEqualTo(actual.getValueType()))
            .satisfies(e -> assertThat(e.getConfidential()).as("check confidential").isEqualTo(actual.getConfidential()))
            .satisfies(e -> assertThat(e.getDisplayFormName()).as("check displayFormName").isEqualTo(actual.getDisplayFormName()))
            .satisfies(e -> assertThat(e.getUniquee()).as("check uniquee").isEqualTo(actual.getUniquee()))
            .satisfies(e -> assertThat(e.getDimensionItemType()).as("check dimensionItemType").isEqualTo(actual.getDimensionItemType()))
            .satisfies(e -> assertThat(e.getAggregationType()).as("check aggregationType").isEqualTo(actual.getAggregationType()))
            .satisfies(
                e ->
                    assertThat(e.getDisplayInListNoProgram())
                        .as("check displayInListNoProgram")
                        .isEqualTo(actual.getDisplayInListNoProgram())
            )
            .satisfies(e -> assertThat(e.getDisplayName()).as("check displayName").isEqualTo(actual.getDisplayName()))
            .satisfies(e -> assertThat(e.getPatterne()).as("check patterne").isEqualTo(actual.getPatterne()))
            .satisfies(
                e -> assertThat(e.getSkipSynchronization()).as("check skipSynchronization").isEqualTo(actual.getSkipSynchronization())
            )
            .satisfies(e -> assertThat(e.getDisplayShortName()).as("check displayShortName").isEqualTo(actual.getDisplayShortName()))
            .satisfies(e -> assertThat(e.getPeriodOffset()).as("check periodOffset").isEqualTo(actual.getPeriodOffset()))
            .satisfies(
                e ->
                    assertThat(e.getDisplayOnVisitSchedule())
                        .as("check displayOnVisitSchedule")
                        .isEqualTo(actual.getDisplayOnVisitSchedule())
            )
            .satisfies(e -> assertThat(e.getFormName()).as("check formName").isEqualTo(actual.getFormName()))
            .satisfies(e -> assertThat(e.getOrgunitScope()).as("check orgunitScope").isEqualTo(actual.getOrgunitScope()))
            .satisfies(e -> assertThat(e.getDimensionItem()).as("check dimensionItem").isEqualTo(actual.getDimensionItem()))
            .satisfies(e -> assertThat(e.getInherit()).as("check inherit").isEqualTo(actual.getInherit()))
            .satisfies(e -> assertThat(e.getOptionSetValue()).as("check optionSetValue").isEqualTo(actual.getOptionSetValue()))
            .satisfies(e -> assertThat(e.getTrack()).as("check track").isEqualTo(actual.getTrack()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrackedEntityAttributeUpdatableRelationshipsEquals(
        TrackedEntityAttribute expected,
        TrackedEntityAttribute actual
    ) {
        assertThat(expected)
            .as("Verify TrackedEntityAttribute relationships")
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getOptionSet()).as("check optionSet").isEqualTo(actual.getOptionSet()))
            .satisfies(e -> assertThat(e.getPrograms()).as("check programs").isEqualTo(actual.getPrograms()));
    }
}

package com.didate.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProgramRuleVariableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleVariableAllPropertiesEquals(ProgramRuleVariable expected, ProgramRuleVariable actual) {
        assertProgramRuleVariableAutoGeneratedPropertiesEquals(expected, actual);
        assertProgramRuleVariableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleVariableAllUpdatablePropertiesEquals(ProgramRuleVariable expected, ProgramRuleVariable actual) {
        assertProgramRuleVariableUpdatableFieldsEquals(expected, actual);
        assertProgramRuleVariableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleVariableAutoGeneratedPropertiesEquals(ProgramRuleVariable expected, ProgramRuleVariable actual) {
        assertThat(expected)
            .as("Verify ProgramRuleVariable auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleVariableUpdatableFieldsEquals(ProgramRuleVariable expected, ProgramRuleVariable actual) {
        assertThat(expected)
            .as("Verify ProgramRuleVariable relevant properties")
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()))
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDisplayName()).as("check displayName").isEqualTo(actual.getDisplayName()))
            .satisfies(
                e ->
                    assertThat(e.getProgramRuleVariableSourceType())
                        .as("check programRuleVariableSourceType")
                        .isEqualTo(actual.getProgramRuleVariableSourceType())
            )
            .satisfies(
                e -> assertThat(e.getUseCodeForOptionSet()).as("check useCodeForOptionSet").isEqualTo(actual.getUseCodeForOptionSet())
            )
            .satisfies(e -> assertThat(e.getTrack()).as("check track").isEqualTo(actual.getTrack()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProgramRuleVariableUpdatableRelationshipsEquals(ProgramRuleVariable expected, ProgramRuleVariable actual) {
        assertThat(expected)
            .as("Verify ProgramRuleVariable relationships")
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()))
            .satisfies(e -> assertThat(e.getProgram()).as("check program").isEqualTo(actual.getProgram()))
            .satisfies(
                e ->
                    assertThat(e.getTrackedEntityAttribute())
                        .as("check trackedEntityAttribute")
                        .isEqualTo(actual.getTrackedEntityAttribute())
            )
            .satisfies(e -> assertThat(e.getDataElement()).as("check dataElement").isEqualTo(actual.getDataElement()));
    }
}
